

                      DAVID ExpressNet SNMP MIB
                         For TCP/IP Networks
                             Release 1.0










                            Donna McMaster
                            June 30, 1990
                              Revision 1
DAVID ExpressNet SNMP MIB                                       Page 2


1  INTRODUCTION

This document specifies the SNMP Management Information Base (MIB) for
the DAVID Systems, Inc., DAVID ExpressNet Intelligent Concentrators.

The information in this document is subject to change without notice.

Additional information about the DAVID Systems SNMP implementation is
available to management station implementors.  Address requests to
Donna McMaster at (408) 720-6838.
DAVID ExpressNet SNMP MIB                                       Page 3


2  MIB OVERVIEW

2.1  DAVID MIB Summary

Every effort has been made to use standard definitions instead of
creating proprietary ones.  The MIB used by the DAVID ExpressNet
product line includes the following:

     1.  The relevant portions of MIB-II, enumerated in section 3 of
         this document.

     2.  DAVID proprietary extensions, defined in sections 4-8 of this
         document.  This DAVID ExpressNet MIB provides port-level,
         module-level, and Concentrator-level status and statistics
         information.


Section 9 contains the DAVID trap (alarm) information for DAVID
ExpressNet Intelligent Concentrators.  Section 10 lists the object
definitions without the textual descriptions.

The DAVID proprietary extensions are in a separate sub-tree of the MIB
under
iso(1).org(3).dod(6).internet(1).private(4).enterprises(1).david(66).



2.2  DAVID ExpressNet MIB Extensions

The DAVID ExpressNet MIB extensions are divided into the following
groups:

     1.  Chassis group

         Information about the physical enclosure and configuration.

     2.  Concentrator group

         Statistics and status for the overall repeater.

     3.  Module group

         Statistics and status for a single plug-in module.

     4.  Port group

         Statistics and status for a single twisted-pair or AUI port.

     5.  Management group

         Information about the Concentrator's network management.

Following are the object definitions for the groups.  The contents of
each group is detailed in the next sections.

DAVID ExpressNet SNMP MIB                                       Page 4


DAVID-MIB   { iso org(3) dod(6) internet(1) private(4) enterprises(1) 66 }

DEFINITIONS ::= BEGIN

IMPORTS
        enterprises, OBJECT-TYPE, NetworkAddress, IpAddress,
        Counter, Gauge, TimeTicks, DisplayString
        FROM RFC1158-SMI;

david                   OBJECT IDENTIFIER ::=   { enterprises 66 }

products                OBJECT IDENTIFIER ::=   { david 1 }

davidExpressNet         OBJECT IDENTIFIER ::=   { products 3 }

exNetChassis            OBJECT IDENTIFIER ::=   { davidExpressNet 1 }
exNetEthernet           OBJECT IDENTIFIER ::=   { davidExpressNet 2 }

exNetConcentrator       OBJECT IDENTIFIER ::=   { exNetEthernet 1 }
exNetModule             OBJECT IDENTIFIER ::=   { exNetEthernet 2 }
exNetPort               OBJECT IDENTIFIER ::=   { exNetEthernet 3 }
exNetMgmt               OBJECT IDENTIFIER ::=   { exNetEthernet 4 }

END



2.3  Format Of Definitions

Following the conventions of the Structure of Management Information
(SMI), object types are defined using the following five fields:

OBJECT:
        A textual name, termed the OBJECT DESCRIPTOR, for the object 
        type, along with its corresponding OBJECT IDENTIFIER.

Syntax:
        The abstract syntax for the object type, presented using ASN.1. 
        This must resolve to an instance of the ASN.1 type Object 
        Syntax defined in the SMI.

Definition:
        A textual description of the semantics of the object type. 
        Implementations should ensure that their interpretation of the 
        object type fulfills this definition, since this MIB is intended 
        for use in multi-vendor environments. As such, it is vital that 
        object types have consistent meaning across all machines.

Access:
        A keyword, one of "read-only", "read-write", "write-only", or
        "not-accessible."  Note that this designation specifies the 
        minimum level of support required.

        As a local matter, implementations may support other access 
        types (e.g. an implementation may elect to permit writing a 
DAVID ExpressNet SNMP MIB                                       Page 5


        variable marked herein as read-only).  Further, protocol-
        specific views (e.g. those implied by an SNMP community) may
        make further restrictions on access to a variable.

Status:
        A keyword, one of "mandatory," "optional," "obsolete," or 
        "deprecated."   Use of "deprecated" implies mandatory status.



2.4  Identification Of Object Instances

This section is quoted from MIB-II.

The names for all object types in the MIB are defined explicitly
either in the Internet-standard MIB or in other documents which
conform to the naming conventions of the SMI.  The SMI requires that
conformant management protocols define mechanisms for identifying
individual instances of those object types for a particular network
element.

Each instance of any object type defined in the MIB is identified in
SNMP operations by a unique name called its "variable name." In
general, the name of an SNMP variable is an OBJECT IDENTIFIER of the
form x.y, where x is the name of a non-aggregate object type defined
in the MIB and y is an OBJECT IDENTIFIER fragment that, in a way
specific to the named object type, identifies the desired instance.

This naming strategy admits the fullest exploitation of the semantics
of the powerful SNMP get-next operator, because it assigns names for
related variables so as to be contiguous in the lexicographical
ordering of all variable names known in the MIB.

The type-specific naming of object instances is defined below for a
number of classes of object types.  Instances of an object type to
which none of the following naming conventions are applicable are
named by OBJECT IDENTIFIERs of the form x.0, where x is the name of
said object type in the MIB definition.

For example, suppose one wanted to identify an instance of the
variable sysDescr.  The object class for sysDescr is:

iso org dod internet mgmt mib system sysDescr
 1   3   6     1      2    1    1       1

Hence, the object type, x, would be 1.3.6.1.2.1.1.1 to which is
appended an instance sub-identifier of 0.  That is, 1.3.6.1.2.1.1.1.0
identifies the one and only instance of sysDescr.
DAVID ExpressNet SNMP MIB                                       Page 6


3  MIB-II OBJECT DEFINITIONS

The DAVID ExpressNet Concentrators implement the following groups from
MIB-II [15]:

     1.  System

     2.  Interfaces

     3.  Address Translation Table

     4.  IP

     5.  ICMP

     6.  UDP

     7.  SNMP

The groups not implemented are

      -  the TCP group and the EGP group, because the Concentrators do
         not implement the TCP or EGP protocols, and

      -  the Transmission Group, because it is empty.

DAVID ExpressNet SNMP MIB                                       Page 7


4  DAVID EXPRESSNET CHASSIS GROUP



OBJECT:
-------
        exNetChassisType { exNetChassis 1 }

Syntax:
        INTEGER {
                other(1),               -- none of the following
                m6102(2),               -- 5-Slot Concentrator, Model 6102
                m6103(3)                -- 12-Slot Concentrator, Model 6103
        }

Definition:
        The chassis type (option).

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetChassisBkplType { exNetChassis 2 }

Syntax:
        INTEGER {
                other(1),               -- none of the following
                expressNet(2),          -- DAVID ExpressNet
                reserved(3)             -- reserved for future 
        }

Definition:
        The chassis backplane type (option).

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetChassisBkplRev { exNetChassis 3 }

Syntax:
        INTEGER 

Definition:
        The chassis backplane revision.
DAVID ExpressNet SNMP MIB                                       Page 8



Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetChassisPsType { exNetChassis 4 }

Syntax:
        INTEGER {
                other(1),               -- none of the following
                standardXfmr(2)         -- currently only one type
        }

Definition:
        The chassis power supply type.
        
        This refers to the chassis transformer.  Each module (including
        the Supervisor Module) has its own switching power supply.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetChassisPsStatus { exNetChassis 5 }

Syntax:
        INTEGER {
                ok(1),                  -- supply ok
                failed(2)               -- power supply failure
        }

Definition:
        The chassis power supply status.

        This refers to the chassis transformer.  Each module (including
        the Supervisor Module) has its own switching power supply.  The
        status of the individual modules' power supplies is a module
        attribute.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                       Page 9


4.1  Chassis Slot Configuration Table

4.1.1  ExNetSlotConfigTable Object Type Names - The name of a slot s
is the OBJECT IDENTIFIER value of the form i, where i has the value of
that instance of the object associated with s.

For each object type t, for which the defined name n has a prefix of
exNetSlotConfigEntry, an instance i of t is named by an OBJECT
IDENTIFIER of the form n.s, where s is the name of the slot about
which i represents information.

For example, suppose one wanted to identify the instance of the
variable exNetModuleType associated with slot 2.  Accordingly,
exNetModuleType.2 would identify the desired instance.

On the physical Concentrator boxes, the Supervisor Modules are not
numbered and the plug-in modules are numbered from 1 to n-1, where n
is the number of slots in the Concentrator.  For the purposes of the
DAVID ExpressNet SNMP MIB, the Supervisor Module is numbered one past
the highest-numbered plug-in module.  For example, in a 12-Slot
Concentrator, the plug-in modules are numbered 1-11 and the Supervisor
Module is numbered 12.


OBJECT:
-------
        exNetSlotConfigTable { exNetChassis 7 }

Syntax:
        SEQUENCE OF ExNetSlotConfigEntry

Definition:
        The chassis slot configuration table.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetSlotConfigEntry { exNetSlotConfigTable 1 }

Syntax:
        ExNetSlotConfigEntry ::= SEQUENCE {
                exNetSlotIndex
                        INTEGER,
                exNetBoardId
                        INTEGER,
                exNetBoardType
                        INTEGER,
                exNetBoardDescr
                        DisplayString (SIZE (0..128))
DAVID ExpressNet SNMP MIB                                      Page 10


                exNetBoardNumOfPorts
                        INTEGER
        }

Definition:
        Descriptions of the modules (or boards) in each slot.

Access:
        read-only.

Status:
        mandatory.
The following definitions describe the individual components of each
entry in the DAVID ExpressNet Chassis Configuration Table:


OBJECT:
-------
        exNetSlotIndex { exNetSlotConfigEntry 1 }

Syntax:
        INTEGER

Definition:
        The DAVID ExpressNet chassis slot number. Valid entries are 1 to
        the capacity of the Concentrator.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetBoardId { exNetSlotConfigEntry 2 }

Syntax:
        INTEGER

Definition:
        The unique hardware ID for the module.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetBoardType { exNetSlotConfigEntry 3 }

DAVID ExpressNet SNMP MIB                                      Page 11


Syntax:
        INTEGER {
                empty(1),       -- nothing installed
                other(2),       -- none of the following
                m6203(3),       -- Supervisor Module, Model 6203
                m6201(4),       -- Twisted-Pair Module, Model 6201
                reserved(5)     -- reserved for future use
        }

Definition:
        The type of module.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetBoardDescr { exNetSlotConfigEntry 4 }

Syntax:
        DisplayString (SIZE(0..128))

Definition:
        Textual description of the module type.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetBoardNumOfPorts { exNetSlotConfigEntry 40 }

Syntax:
        INTEGER

Definition:
        The number of ports supported by the plug-in module.  For a
        Twisted-Pair Module the value is 12; for a Supervisor Module, 1.

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 12



OBJECT:
-------
        exNetChassisCapacity { exNetChassis 8 }

Syntax:
        INTEGER 

Definition:
        The number of slots in the chassis for plug-in modules.
        Currently this number will always be either five or twelve.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 13


5  DAVID EXPRESSNET CONCENTRATOR GROUP



OBJECT:
-------
        exNetConcRetimingStatus { exNetConcentrator 1 }

Syntax:
        INTEGER {
                off(1),         -- retiming off
                on(2)           -- retiming on
        }

Definition:
        Indicates whether this concentrator has retiming turned on. 

        All DAVID ExpressNet Concentrators implement retiming, so
        the Concentrators always return on (2) for this variable.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcFrmsRxOk { exNetConcentrator 2 }

Syntax:
        Counter

Definition:
        A count of frames that are successfully received by the 
        Concentrator. This counter does not include frames received 
        with frame-too-long, runt, FCS, or alignment errors.

        This counter includes broadcast and multicast frames that are 
        received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcOctetsRxOk { exNetConcentrator 3 }

Syntax:
        Counter
DAVID ExpressNet SNMP MIB                                      Page 14



Definition:
        A count of data and padding octets in frames that are 
        successfully received by the Concentrator. This counter 
        does not include frames received with frame-too-long, runt, 
        FCS, or alignment errors.

        This counter includes octets in broadcast and multicast frames 
        that are received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcMcastFrmsRxOk { exNetConcentrator 4 }

Syntax:
        Counter

Definition:
        A count of frames that are successfully received by the 
        Concentrator and are directed to an active non-broadcast group 
        address. This counter does not include frames received with 
        frame-too-long, runt, FCS, or alignment errors.

        Only frames that are for a multicast address that this 
        interface is receiving are counted. Broadcast packets are not 
        included.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcBcastFrmsRxOk { exNetConcentrator 5 }

Syntax:
        Counter

Definition:
        A count of frames that are successfully received by the 
        Concentrator and are directed to the broadcast group address. 
        This counter does not include frames received with frame-too-
        long, runt, FCS, or alignment errors.

        Multicast packets are not included.
DAVID ExpressNet SNMP MIB                                      Page 15



Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcColls { exNetConcentrator 6 }

Syntax:
        Counter

Definition:
        Total collisions involving an incoming packet on any port
        (link or AUI) in the Concentrator.  This counter increments
        once for each collision involving an incoming packet on any
        port, no matter how many ports are involved.

Access:
        read-only.

Status:
        mandatory.



5.1  MAC Receive Error Statistics

A hierarchical order has been established for the objects listed
below, such that when more than one error status can be associated
with one frame, only one status is counted.  This hierarchy, in
descending order, is as follows:

     1.  frame too long

     2.  runt frames

     3.  fragments

     4.  alignment error

     5.  frame check error



OBJECT:
-------
        exNetConcTooLongErrors { exNetConcentrator 7 }

Syntax:
        Counter

DAVID ExpressNet SNMP MIB                                      Page 16


Definition:
        A count of frames that are received by the Concentrator and 
        exceed the maximum permitted frame size, but do not trigger
        the repeater's jabber protection functions.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcRuntErrors { exNetConcentrator 8 }

Syntax:
        Counter

Definition:
        Number of frames received by the Concentrator that have a 
        correct preamble (including double 1), but are less than 64 
        bytes long.  Runts are commonly collision fragments, and as
        such do not necessarily indicate a problem in the network.

        Runts are also known as "short frames."

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcFragErrors { exNetConcentrator 9 }

Syntax:
        Counter

Definition:
        Fragments of packets, less than 96 bits long, that are 
        received on the Concentrator.  Fragments indicate an external
        noise hit (a problem on the network).

        Fragments are also known as "pygmies."

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 17



OBJECT:
-------
        exNetConcAlignErrors { exNetConcentrator 10 }

Syntax:
        Counter

Definition:
        Number of frames received on the Concentrator that are byte-
        misaligned, such that the number of bits is not a multiple of 8.

        (These frames do not pass the frame check sequence check, but 
        are not counted as FCS errors.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcFcsErrors { exNetConcentrator 11 }

Syntax:
        Counter

Definition:
        A count of frames received by the Concentrator that are an 
        integral number of octets in length and do not pass the frame
        check sequence (FCS) check.

        FCS errors are sometimes called CRC errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcLateCollErrors { exNetConcentrator 12 }

Syntax:
        Counter

Definition:
        A total Concentrator count of the late collisions.  The late
        collision counter for a port is incremented whenever a
        collision is detected on the port later than 512 bit times
        into the transmitted packet.  
DAVID ExpressNet SNMP MIB                                      Page 18


        
        Late collisions are not included in the collision count.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcName { exNetConcentrator 40 }

Syntax:
        DisplayString (SIZE(0..20))

Definition:
        A descriptive string that can be used by a network administrator
        to name the Concentrator.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetConcJabbers { exNetConcentrator 41 }

Syntax:
        Counter

Definition:
        A count of the number of times that the jabber function had 
        to be invoked because a frame received from one of this 
        Concentrator's ports exceeded 5 msec in duration.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcSfdErrors { exNetConcentrator 42 }

Syntax:
        Counter

Definition:
DAVID ExpressNet SNMP MIB                                      Page 19


        Amount of activity from this Concentrator's ports where a
        double-zero is seen before the start-frame delimiter
        (double-1).  (This could indicate a polarity problem.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcAutoPartitions { exNetConcentrator 43 }

Syntax:
        Counter

Definition:
        Indicates how often ports on this Concentrator have been
        automatically partitioned by the Concentrator repeater
        function.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcOosBitRate { exNetConcentrator 44 }

Syntax:
        Counter

Definition:
        Number of times that frames have been received on the 
        Concentrator with the transmission frequency (data rate)
        badly out of spec.  This counter is incremented when the
        frequency of a received frame is so far out of spec that
        the packet has been corrupted within the relay.

        The spec allows deviations of +/- 100 parts per million (ppm).
        The DAVID ExpressNet Intelligent Concentrators can handle 
        greater deviations than this, depending on frame length.

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 20



OBJECT:
-------
        exNetConcLinkErrors { exNetConcentrator 45 }

Syntax:
        Counter

Definition:
        This composite counter includes jabbers, auto-partitions, and
        start-frame delimiter errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcFrameErrors { exNetConcentrator 46 }

Syntax:
        Counter

Definition:
        This composite counter includes frame check sequence errors,
        fragments, short frames, long frames, and alignment errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcNetUtilization { exNetConcentrator 47 }

Syntax:
        OCTET STRING (SIZE (1..10))

Definition:
        A series of ten bytes, each indicating the percentage of
        bandwidth utilization for a 100-millisecond interval.
        Together they give the bandwidth utilization for the previous
        second.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 21



OBJECT:
-------
        exNetConcResetTimeStamp { exNetConcentrator 48 }

Syntax:
        Gauge

Definition:
        The value of sysUpTime at the point that the Concentrator
        repeater state machine was last reset.
        
Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetConcReset { exNetConcentrator 49 }

Syntax:
        INTEGER {
                noReset(1),             -- not resetting
                reset(2),               -- resetting, maintaining config
                resetToDefault(3)       -- resetting to factory config
        }

Definition:
        The reset state of the Concentrator's repeater state machine.
        Writing a 2 will reset the Concentrator's control logic, 
        without changing the current configuration.  Writing a 3 
        will reset the Concentrator to the initial factory default
        configuration.

Access:
        read-write.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 22


6  DAVID EXPRESSNET MODULE GROUP

6.1  Module Table

6.1.1  ExNetModuleTable Object Types Names - The name of the module s
is the OBJECT IDENTIFIER value of the form a, such that a is the value
of that instance of the module associated with s.

For each object type t for which the defined name n has a prefix of
exNetModuleEntry, an instance i of t is named by an OBJECT IDENTIFIER
of the form n.s, where s is the name of the module about which i
represents information.

For example, suppose one wanted to identify an instance of the
variable exNetModuleFCSErrors associated with module 2.  Accordingly,
exNetModuleFCSErrors.2 would identify the desired instance.

On the physical Concentrator boxes, the Supervisor Modules are not
numbered and the plug-in modules are numbered from 1 to n-1, where n
is the number of slots in the Concentrator.  For the purposes of the
DAVID ExpressNet SNMP MIB, the Supervisor Module is numbered one past
the highest-numbered plug-in module.  For example, in a 12-Slot
Concentrator, the plug-in modules are numbered 1-11 and the Supervisor
Module is numbered 12.


OBJECT:
-------
        exNetModuleTable { exNetModule 1 }

Syntax:
        SEQUENCE OF ExNetModuleEntry

Definition:
        A list of module entries.  The number of entries is given by 
        the number of modules that are obtained by the Concentrator 
        Slot Configuration Table.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleEntry { exNetModuleTable 1 }

Syntax:
        ExNetModuleEntry ::= SEQUENCE {
                exNetModuleIndex
                        INTEGER,
                exNetModuleType
                        INTEGER,
DAVID ExpressNet SNMP MIB                                      Page 23


                exNetModuleHwVer
                        INTEGER,
                exNetModuleStatus
                        INTEGER,
                exNetModuleReset
                        INTEGER,
                exNetModulePartStatus
                        INTEGER,
                exNetModuleNmCntlStatus
                        INTEGER,
                exNetModulePsStatus
                        INTEGER,
                exNetModuleFrmsRxOk
                        Counter,
                exNetModuleOctetsRxOk
                        Counter,
                exNetModuleColls
                        Counter,
                exNetModuleTooLongErrors
                        Counter,
                exNetModuleRuntErrors
                        Counter,
                exNetModuleAlignErrors
                        Counter,
                exNetModuleFcsErrors
                        Counter,
                exNetModuleLateCollErrors
                        Counter,

                exNetModuleName
                        DisplayString,
                exNetModuleJabbers
                        Counter,
                exNetModuleSfdErrors
                        Counter,
                exNetModuleAutoPartitions
                        Counter,
                exNetModuleOosBitRate
                        Counter,
                exNetModuleLinkErrors
                        Counter,
                exNetModuleFrameErrors
                        Counter,
                exNetModuleFragErrors
                        Counter,
                exNetModulePortConfig
                        INTEGER,
                exNetModuleLinkStatConfig
                        INTEGER,
                exNetModuleResetTimeStamp
                        INTEGER,
                exNetModuleLinkStatus
                        INTEGER,
                exNetModuleFwVer
                        INTEGER,
DAVID ExpressNet SNMP MIB                                      Page 24


                exNetModuleFwFeaturePkg
                        INTEGER,
                exNetModuleSelfTestResult
                        INTEGER
        }

Definition:
        A module entry containing objects at the module level for a 
        particular module.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleIndex { exNetModuleEntry 1 }

Syntax:
        INTEGER

Definition:
        A unique value for each module.  Its value ranges between 1 and 
        exNetChassisCapacity.  The value for each module must remain
        constant at least from one reinitialization of the entity's 
        network management system to the next reinitialization.

        This value is tied to the hardware chassis slot number.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleType { exNetModuleEntry 2 }

Syntax:
        INTEGER {
                empty(1),       -- nothing installed
                other(2),       -- none of the following
                m6203(3),       -- Supervisor Module, Model 6203
                m6201(4),       -- Twisted-Pair Module, Model 6201
                reserved(5)     -- reserved for future use
        }

Definition:
        The type of module.

DAVID ExpressNet SNMP MIB                                      Page 25


Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleHwVer { exNetModuleEntry 3 }

Syntax:
        INTEGER

Definition:
        The hardware revision of the module. 1=Rev. A, 2=Rev. B, etc.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleStatus { exNetModuleEntry 4 }

Syntax:
        INTEGER {
                ok(1),          -- good status
                noComms(2),     -- lost communications with module
                selfTestFail(3) -- module self-test failed
        }

Definition:
        The operational status of the module.  If the status is 
        selfTestFail(3), the exNetModuleSelfTestResult will give
        more detailed information about the module's condition.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleReset { exNetModuleEntry 5 }

Syntax:
        INTEGER {
                noReset(1),             -- not resetting
                reset(2),               -- resetting, maintaining config
DAVID ExpressNet SNMP MIB                                      Page 26


                resetToDefault(3)       -- resetting to factory config
        }

Definition:
        The reset state of the module.  Writing a 2 will reset the 
        module's control logic, without changing the current 
        configuration.  Writing a 3 will reset the module to the
        initial factory default configuration.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModulePartStatus { exNetModuleEntry 6 }

Syntax:
        INTEGER {
                enabled(1),             -- module enabled
                partition(2)            -- module partitioned
        }

Definition:
        Tells whether the module is partitioned or enabled.  Writing
        a 2 will partition the module and 1 will enable the module.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleNmCntlStatus { exNetModuleEntry 7 }

Syntax:
        INTEGER {
                notNmControl(1),        -- module not under net mgmt control
                nmControl(2)            -- module under net mgmt control
        }

Definition:
        Tells whether the module is under network management control.

        DAVID ExpressNet Concentrators always return nmControl(2),
        since all modules are always under network management control.

Access:
        read-only.
DAVID ExpressNet SNMP MIB                                      Page 27



Status:
        mandatory.


OBJECT:
-------
        exNetModulePsStatus { exNetModuleEntry 8 }

Syntax:
        INTEGER {
                ok(1),          -- good status
                fail(2)         -- bad status
        }

Definition:
        The operational status of the module's switching power supply.
        A failure indicates that the -5V power supply on the module
        has failed.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleFrmsRxOk { exNetModuleEntry 9 }

Syntax:
        Counter

Definition:
        A count of frames that are successfully received by the module. 
        This counter does not include frames received with frame-too-
        long, runt, FCS, or alignment errors.

        This counter includes broadcast and multicast frames that are 
        received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleOctetsRxOk { exNetModuleEntry 10 }

Syntax:
        Counter
DAVID ExpressNet SNMP MIB                                      Page 28



Definition:
        A count of data and padding octets in frames that are 
        successfully received by the module. This counter does not 
        include frames received with frame-too-long, runt, FCS, or 
        alignment errors.

        This counter includes octets in broadcast and multicast frames 
        that are received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleColls { exNetModuleEntry 13 }

Syntax:
        Counter

Definition:
        Total collisions involving an incoming packet on any link or
        the backplane connector in the module.  This counter increments
        once for each collision involving an incoming packet on any port,
        no matter how many ports are involved.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleTooLongErrors { exNetModuleEntry 14 }

Syntax:
        Counter

Definition:
        A count of frames that are received by the module and exceed
        the maximum permitted frame size, but do not trigger the
        repeater's jabber protection functions.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 29



OBJECT:
-------
        exNetModuleRuntErrors { exNetModuleEntry 15 }

Syntax:
        Counter

Definition:
        Number of frames received by the module that have a correct
        preamble (including double 1), but are less than 64 bytes long.
        Runts are commonly collision fragments, and as such do not
        necessarily indicate a problem in the network.

        Runts are also called "short frames."

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleAlignErrors { exNetModuleEntry 16 }

Syntax:
        Counter

Definition:
        Number of frames received by the module that are byte-
        misaligned, such that the number of bits is not a multiple of 8.

        (These frames do not pass the frame check sequence check, 
        but are not counted as FCS errors.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleFcsErrors { exNetModuleEntry 17 }

Syntax:
        Counter

Definition:
        A count of frames received by the module that are an integral
        number of octets in length and do not pass the frame check
        sequence (FCS) check.
DAVID ExpressNet SNMP MIB                                      Page 30



        FCS errors are sometimes called CRC errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleLateCollErrors { exNetModuleEntry 18 }

Syntax:
        Counter

Definition:
        A module count of the late collisions on all of the module's
        ports.  The late collision counter for a port is incremented
        whenever a collision is detected on the port later than 512 
        bit times into the transmitted packet.  
        
        Late collisions are not included in the collision count.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleName { exNetModuleEntry 40 }

Syntax:
        DisplayString (SIZE(0..20))

Definition:
        A descriptive string that can be used by a network administrator
        to name the module.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleJabbers { exNetModuleEntry 41 }

Syntax:
DAVID ExpressNet SNMP MIB                                      Page 31


        Counter

Definition:
        A count of the number of times that the jabber function had to
        be invoked because a frame received from one of this module's
        ports exceeded 5 msec in duration.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleSfdErrors { exNetModuleEntry 42 }

Syntax:
        Counter

Definition:
        Amount of activity from this module's ports where a double-zero
        is seen before the start-frame delimiter (double-1).  (This
        could indicate a polarity problem.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleAutoPartitions { exNetModuleEntry 43 }

Syntax:
        Counter

Definition:
        Indicates how often ports on this module have been automatically
        partitioned by the module repeater function.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleOosBitRate { exNetModuleEntry 44 }

DAVID ExpressNet SNMP MIB                                      Page 32


Syntax:
        Counter

Definition:
        Number of times that frames have been received from this link
        with the transmission frequency (data rate) badly out of spec.
        This counter is incremented when the frequency of a received
        frame is so far out of spec that the packet has been corrupted
        within the relay.

        The spec allows deviations of +/- 100 parts per million (ppm).
        The DAVID ExpressNet Concentrators can handle greater deviations
        than this, depending on frame length.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleLinkErrors { exNetModuleEntry 45 }

Syntax:
        Counter

Definition:
        This composite counter includes jabbers, auto-partitions, and
        start-frame delimiter errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleFrameErrors { exNetModuleEntry 46 }

Syntax:
        Counter

Definition:
        This composite counter includes frame check sequence errors,
        fragments, short frames, long frames, and alignment errors.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 33



OBJECT:
-------
        exNetModuleFragErrors { exNetModuleEntry 47 }

Syntax:
        Counter

Definition:
        Fragments of packets, less than 96 bits long, that are received
        on the Concentrator.  Fragments indicate an external noise hit
        (a problem on the network).

        Fragments are also known as "pygmies."

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModulePortConfig { exNetModuleEntry 48 }

Syntax:
        INTEGER

Definition:
        Compresses the configuration of all of this module's ports into
        a two-byte integer value.

        Sums f(x) as x goes from 1 to number of ports, where f(x) = 0 
        for disabled port and f(x) = exp(2,x-1) for enabled port.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleLinkStatConfig { exNetModuleEntry 49 }

Syntax:
        INTEGER

Definition:
        Compresses the link status configuration of all of this module's
        ports into a two-byte integer value.  Sums f(x) as x goes from 
        1 to number of ports, where f(x) = 0 for port with link status 
        disabled and f(x) = exp(2,x-1) for port with link status enabled.
DAVID ExpressNet SNMP MIB                                      Page 34



Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleResetTimeStamp { exNetModuleEntry 50 }

Syntax:
        Gauge

Definition:
        The value of sysUpTime at the point that the module repeater
        state machine was last reset.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleLinkStatus { exNetModuleEntry 51 }

Syntax:
        INTEGER

Definition:
        Compresses the link status of all of this module's ports into
        a two-byte integer value.  Sums f(x) as x goes from 1 to number
        of ports, where f(x) = 0 for port with link status test passed
        (link active) and f(x) = exp(2,x-1) for port with link status
        test failed (link inactive).
        
        For ports with link status test disabled, zero is returned. 

        For example, if link status is active on all ports, the value
        returned is zero.  If link status for ports 3 and 7 is inactive
        and the rest of the ports have active link status, the value
        returned is (2^(3-1) + 2^(7-1)) = (4 + 64) = 68.

Access:
        read-write.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 35



OBJECT:
-------
        exNetModuleFwVer { exNetModuleEntry 52 }

Syntax:
        INTEGER

Definition:
        The firmware revision of the GAP processor on the module.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleFwFeaturePkg { exNetModuleEntry 53 }

Syntax:
        INTEGER

Definition:
        The feature package associated with the GAP processor on the
        module.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetModuleSelfTestResult { exNetModuleEntry 54 }

Syntax:
        INTEGER.

Definition:
        The self-test result value returned by the GAP processor on
        the module.  Zero indicates that the module passed all tests.
        Bits set in the result indicate error conditions.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 36


7  DAVID EXPRESSNET PORT GROUP

7.1  Ethernet Port Table

7.1.1  ExNetPortTable Object Types Names - The name of the port s is
the OBJECT IDENTIFIER value of the form a.b, such that a.b is the
value of that instance of the port associated with s.

For each object type t for which the defined name n has a prefix of
exNetPortEntry, an instance i of t is named by an OBJECT IDENTIFIER of
the form n.s.p, where s.p is the name of the slot and port about which
i represents information.

For example, suppose one wanted to identify an instance of the
variable exNetPortFCSErrors associated with slot 2 port 1.
Accordingly, exNetPortFCSErrors.2.1 would identify the desired
instance.

On the physical Concentrator boxes, the Supervisor Modules are not
numbered and the plug-in modules are numbered from 1 to n-1, where n
is the number of slots in the Concentrator.  For the purposes of the
DAVID ExpressNet SNMP MIB, the Supervisor Module is numbered one past
the highest-numbered plug-in module.

The AUI port on a Supervisor Module is numbered port 1.  In a 12-Slot
Concentrator, the AUI port would be slot 12 port 1, and
exNetPortFCSErrors.12.1 would identify the FCS error counts for the
AUI port.


OBJECT:
-------
        exNetPortTable { exNetPort 1 }

Syntax:
        SEQUENCE OF ExNetPortEntry

Definition:
        A list of port entries. The number of entries is given by 
        knowing the number of occupied slots in the 
        exNetChassisSlotConfigTable and the number of ports that are 
        on a exNetModuleType.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortEntry { exNetPortTable 1 }

Syntax:
DAVID ExpressNet SNMP MIB                                      Page 37


        ExNetPortEntry ::= SEQUENCE {
                exNetPortModuleIndex
                        INTEGER,
                exNetPortIndex
                        INTEGER,
                exNetPortLinkStatus
                        INTEGER,
                exNetPortPartStatus
                        INTEGER,
                exNetPortJabberStatus
                        INTEGER,
                exNetPortFrmsRxOk
                        Counter,
                exNetPortOctetsRxOk
                        Counter,
                exNetPortColls
                        Counter,
                exNetPortTooLongErrors
                        Counter,
                exNetPortRuntErrors
                        Counter,
                exNetPortAlignErrors
                        Counter,
                exNetPortFcsErrors
                        Counter,
                exNetPortLateCollErrors
                        Counter,
                exNetPortName
                        DisplayString,
                exNetPortJabbers
                        Counter,
                exNetPortSfdErrors
                        Counter,
                exNetPortAutoPartitions
                        Counter,
                exNetPortOosBitRate
                        Counter,
                exNetPortLinkErrors
                        Counter,
                exNetPortFrameErrors
                        Counter,
                exNetPortFragErrors
                        Counter,
                exNetPortType
                        INTEGER,
                exNetPortMauType
                        INTEGER,
                exNetPortConfig
                        INTEGER,
                exNetPortLinkStatConfig
                        INTEGER,
                exNetPortPolarity
                        INTEGER,
                exNetPortTransmitTest
                        INTEGER
DAVID ExpressNet SNMP MIB                                      Page 38


        }

Definition:
        A port entry containing objects at the port level for a 
        particular port.

Access:
        read-write

Status:
        mandatory.


OBJECT:
-------
        exNetPortModuleIndex { exNetPortEntry 1 }

Syntax:
        INTEGER

Definition:
        A unique value for each module. Its value ranges between 1 and
        exNetChassisSlotCapacity. The value for each module must remain
        constant at least from one reinitialization of the entity's
        network management system to the next reinitialization.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortIndex { exNetPortEntry 2 }

Syntax:
        INTEGER

Definition:
        A unique value for each port. Its value ranges between 1 and
        the value of exNetBoardNumOfPorts for this module.  The value
        for each port must remain constant at least from one
        reinitialization of the entity's network management system to
        the next reinitialization.

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 39



OBJECT:
-------
        exNetPortLinkStatus { exNetPortEntry 3 }

Syntax:
        INTEGER {
                off(1),         -- link is not connected
                on(2),          -- link is connected
                other(3)        -- returned for AUI
        }

Definition:
        This is the link integrity test defined by the 10BASE-T
        standard.  It applies only to twisted-pair links (not to the
        AUI port).

        If link status test is enabled, this flag indicates whether
        the link is active or inactive.  There are several reasons for
        an inactive link:
           -    PC or workstation connected to the MAU has been
                turned off
           -    disrupted link (e.g., wiring problem)
           -    TP-MAU on the end of the link is missing, dead, 
                or powered off
           -    transmit and receive polarities are swapped

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortPartStatus { exNetPortEntry 4 }

Syntax:
        INTEGER {
                enabled(1),             -- port enabled
                other(2),               -- value not used
                autoPartition(3)        -- port auto-partitioned
        }

Definition:
        Indicates whether the port is currently partitioned by the
        Concentrator's auto-partition protection.  (The Concentrator
        automatically partitions a port if it is signalling continuous
        collision, or 32 consecutive collisions.)

        Writing a 1 will forcibly unpartition the port.  Writing a 2
        or a 3 is illegal.  To enable or disable the port, use the 
        exNetPortConfig variable.

DAVID ExpressNet SNMP MIB                                      Page 40


Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortJabberStatus { exNetPortEntry 5 }

Syntax:
        INTEGER {
                ok(1),
                jabbering(2)    -- Port receiving jabber
        }

Definition:
        Tells whether the DTE connected to the port is jabbering
        (receiving a frame longer than 5 msec in duration).

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortFrmsRxOk { exNetPortEntry 6 }

Syntax:
        Counter

Definition:
        A count of frames that are successfully received by the port. 
        This counter does not include frames received with frame-too-
        long, runt, FCS, or alignment errors.

        This counter includes broadcast and multicast frames that are 
        received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortOctetsRxOk { exNetPortEntry 7 }

Syntax:
DAVID ExpressNet SNMP MIB                                      Page 41


        Counter

Definition:
        A count of data and padding octets in frames that are 
        successfully received by the port. This counter does not 
        include frames received with frame-too-long, runt, FCS, or 
        alignment errors.

        This counter includes octets in broadcast and multicast frames 
        that are received.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortColls { exNetPortEntry 10 }

Syntax:
        Counter

Definition:
        Number of times this port was involved in a collision with
        another port in the same Hub.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortTooLongErrors { exNetPortEntry 11 }

Syntax:
        Counter

Definition:
        A count of frames that are received by the port and exceed the
        maximum permitted frame size, but do not trigger the repeater's
        jabber protection functions.

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 42



OBJECT:
-------
        exNetPortRuntErrors { exNetPortEntry 12 }

Syntax:
        Counter

Definition:
        Number of frames received by the port that have a correct
        preamble (including double 1), but are less than 64 bytes long.
        Runts are commonly collision fragments, and as such do not
        necessarily indicate a problem in the network.

        Runts are also called "short frames."

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortAlignErrors { exNetPortEntry 13 }

Syntax:
        Counter

Definition:
        Number of frames received by the port that are byte-misaligned,
        such that the number of bits is not a multiple of 8.

        (These frames do not pass the frame check sequence check, but
        are not counted as FCS errors.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortFcsErrors { exNetPortEntry 14 }

Syntax:
        Counter

Definition:
        A count of frames received by the port that are an integral
        number of octets in length and do not pass the frame check
        sequence (FCS) check.  This counter is incremented when the
DAVID ExpressNet SNMP MIB                                      Page 43


        frameCheckError status is detected.

        FCS errors are sometimes called CRC errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortLateCollErrors { exNetPortEntry 15 }

Syntax:
        Counter

Definition:
        Number of times that a collision has been detected on this
        port later than 512 bit times into the transmitted packet.

        Late collisions are not included in the collision count.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortName { exNetPortEntry 40 }

Syntax:
        DisplayString (SIZE(0..20))

Definition:
        A descriptive string that can be used by a network administrator
        to name the port.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortJabbers { exNetPortEntry 41 }

Syntax:
        Counter
DAVID ExpressNet SNMP MIB                                      Page 44



Definition:
        A count of the number of times that the jabber function had to
        be invoked because a frame received from this port exceeded 5
        msec in duration.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortSfdErrors { exNetPortEntry 42 }

Syntax:
        Counter

Definition:
        Amount of activity from this port where a double-zero is seen
        before the start-frame delimiter (double-1).  (This could
        indicate a polarity problem.)

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortAutoPartitions { exNetPortEntry 43 }

Syntax:
        Counter

Definition:
        Indicates how often this port has been automatically
        partitioned by the module repeater function.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortOosBitRate { exNetPortEntry 44 }

Syntax:
DAVID ExpressNet SNMP MIB                                      Page 45


        Counter

Definition:
        Number of times that frames have been received from this link
        with the transmission frequency (data rate) badly out of spec.
        This counter is incremented when the frequency of a received
        frame is so far out of spec that the packet has been corrupted
        within the relay.

        The spec allows deviations of +/- 100 parts per million (ppm).
        The DAVID ExpressNet Concentrators can handle greater deviations
        than this, depending on frame length.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortLinkErrors { exNetPortEntry 45 }

Syntax:
        Counter

Definition:
        This composite counter includes jabbers, auto-partitions, and
        start-frame delimiter errors.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortFrameErrors { exNetPortEntry 46 }

Syntax:
        Counter

Definition:
        This composite counter includes frame check sequence errors,
        fragments, short frames, long frames, and alignment errors.

Access:
        read-only.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 46



OBJECT:
-------
        exNetPortFragErrors { exNetPortEntry 47 }

Syntax:
        Counter

Definition:
        Fragments of packets, less than 96 bits long, that are received
        on this port.   Fragments indicate an external noise hit (a
        problem on the network).

        Fragments are also known as "pygmies."

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortType { exNetPortEntry 48 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                repeater(2),      -- any 802.3 section 9 rptr port
                tenBasefAsync(3), -- FOIRL-compat. port on 10BASE-FA star
                tenBasefSync(4)   -- synchronous port on 10BASE-FA star
        }

Definition:
        The type of the port.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMauType { exNetPortEntry 49 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                tenBase5(2),      -- thick-wire (AUI)
                tenBaseT(3),      -- 10BASE-T
                FOIRL(4),         -- FOIRL
                tenBase2(5),      -- thin-wire (BNC)
DAVID ExpressNet SNMP MIB                                      Page 47


                tenBaseFA(6)      -- 10BASE-F Active
        }

Definition:
        The type of the MAU attached to the port.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetPortConfig { exNetPortEntry 50 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                enabled(2),       -- port enabled
                disabled(3),      -- port disabled
                txDisabled(4),    -- transmit disabled (receive enabled)
                rxDisabled(5)     -- receive disabled (transmit enabled)
        }

Definition:
        The administrative state of the port.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortLinkStatConfig { exNetPortEntry 51 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                enabled(2),       -- link status enabled
                disabled(3),      -- link status disabled
                txDisabled(4),    -- transmit disabled (receive enabled)
                rxDisabled(5)     -- receive disabled (transmit enabled)
        }

Definition:
        The administrative status of the link status test for this link.  

        This variable applies only to ports with MauType = 10BASE-T.

Access:
DAVID ExpressNet SNMP MIB                                      Page 48


        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortPolarity { exNetPortEntry 52 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                positive(2),      -- positive polarity
                negative(3),      -- negative polarity
                txNegative(4),    -- transmit negative, receive positive
                rxNegative(5)     -- receive negative, transmit positive
        }

Definition:
        The polarity of the port.  Applies only to ports with MAU type
        10BASE-T.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetPortTransmitTest { exNetPortEntry 53 }

Syntax:
        INTEGER {
                other(1),         -- none of the following
                disabled(2),      -- transmit test disabled
                enabled(3)        -- transmit test enabled
        }

Definition:
        Whether or not transmit test is enabled on the link.  Transmit
        test applies only to links of type 10BASE-T.

        THIS TEST CAN BE DISRUPTIVE TO THE NETWORK.

Access:
        read-write.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 49


8  DAVID EXPRESSNET MANAGEMENT GROUP



OBJECT:
-------
        exNetMgmtType { exNetMgmt 1 }

Syntax:
        INTEGER {
                other(1),               -- none of the following
                TBD(2)
        }

Definition:
        The DAVID ExpressNet Ethernet network management type.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtHwVer { exNetMgmt 2 }

Syntax:
        INTEGER

Definition:
        The network management ICM hardware version number: 
        1=Rev. A, 2=Rev. B, etc.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtFwVer { exNetMgmt 3 }

Syntax:
        INTEGER

Definition:
        The network management ICP firmware version.

Access:
        read-only.

DAVID ExpressNet SNMP MIB                                      Page 50


Status:
        mandatory.


OBJECT:
-------
        exNetMgmtSwMajorVer { exNetMgmt 4 }

Syntax:
        INTEGER

Definition:
        The network management major software version number, where 
        the version number is of the form major.minor, e.g. 3.0.
        
        Refers to the ECP.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtSwMinorVer { exNetMgmt 5 }

Syntax:
        INTEGER

Definition:
        The network management minor software version number, where
        the version number is of the form major.minor, e.g. 3.0.

        Refers to the ECP.

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtStatus { exNetMgmt 6 }

Syntax:
        INTEGER {
                offline(1),        -- the net mgmt is off line
                online(2)          -- the net mgmt is on line
        }

Definition:
DAVID ExpressNet SNMP MIB                                      Page 51


        Indicates that the network management is on line and operating.

        For the DAVID ExpressNet Concentrators, management status is
        always online(2).

Access:
        read-only.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtMode { exNetMgmt 7 }

Syntax:
        INTEGER {
                primary(1),        -- the net mgmt is in primary mode
                secondary(2)       -- the net mgmt is in secondary mode
        }

Definition:
        Indicates whether the network management is operating in primary
        or secondary mode.

        Presently, all DAVID ExpressNet Concentrators return primary(1).

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtReset { exNetMgmt 8 }

Syntax:
        INTEGER {
                notReset(1),            -- not resetting
                reset(2)                -- resetting
        }

Definition:
        Network management reset status.  Writing a 2 to this object
        will reset the network management (stop refreshing the watchdog 
        timer) and restart.  This process takes about 45 seconds.

Access:
        read-write.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 52



OBJECT:
-------
        exNetMgmtRestart { exNetMgmt 9 }

Syntax:
        INTEGER {
                notRestart(1),          -- not restarting
                restart(2)              -- restarting
        }

Definition:
        Network management restart status.  Writing a 2 to this object
        will restart the network management.  This initializes all the 
        counters, rereads the EEPROM data structure, and starts 
        executing from the beginning of the code.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtIpAddr { exNetMgmt 10 }

Syntax:
        IpAddress

Definition:
        The network management's administrative IP address. The 
        current operational IP address can be obtained from the 
        ipAdEntAddr entry in the ipAddrTable.

        This parameter will take effect only after a restart 
        (exNetMgmtRestart) or reset (exNetMgmtReset) is issued.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtNetMask { exNetMgmt 11 }

Syntax:
        IpAddress

Definition:
        The network Management's administrative subnet mask.  The
DAVID ExpressNet SNMP MIB                                      Page 53


        current operational subnet mask can be obtained from the 
        ipAdEntNetMask entry in the ipAddrTable.

        This parameter will take effect only after a restart 
        (exNetMgmtRestart) or reset (exNetMgmtReset) is issued.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtDefaultGateway { exNetMgmt 12 }

Syntax:
        IpAddress

Definition:
        The network management's administrative default gateway IP
        address. The current operational default gateway's IP address
        can be obtained from the ipRoutingTable.

        This parameter will take effect only after a restart 
        (exNetMgmtRestart) or reset (exNetMgmtReset) is issued.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtBaudRate { exNetMgmt 17 }

Syntax:
        Gauge

Definition:
        Returns the baud rate in bits per second of the RS-232 port.

        Note:  The Concentrators autobaud to match the device attached
        to the RS-232 port.

Access:
        read-only.

Status:
        mandatory.

DAVID ExpressNet SNMP MIB                                      Page 54



OBJECT:
-------
        exNetMgmtLocation { exNetMgmt 19 }

Syntax:
        DisplayString (SIZE (0..255))

Definition:
        This is an informational string that could be used to show the 
        physical location (i.e., area) of the network management or 
        concentrator.

        This parameter is saved in non-volatile memory and will survive
        a reset.

        Note:  This variable is aliased to the sysLocation variable in 
        the MIB-II system group.  Changing one will change the other.
        It is suggested that the system group variable be used whenever 
        possible.

Access:
        read-write.

Status:
        mandatory.



8.1  DAVID ExpressNet Trap Receiver Table

8.1.1  ExNetMgmtTrapReceiverTable Object Type Names - The name of a
trap receiver address x is the OBJECT IDENTIFIER of the form a.b.c.d,
such that a.b.c.d is the value (in the familiar "dot" notation) of
that instance of the exNetMgmtTrapReceiverAddress object type
associated with x.

For each object type t for which the defined name n has a prefix of
exNetMgmtTrapReceiverEntry, an instance i of t is named by an OBJECT
IDENTIFIER of the form n.y, where y is the name of the trap receiver
address about which i represents information.

For example, suppose one wanted to find the trap receiver's community
string for an entry in the Trap Receiver table associated with an IP
address of 89.1.1.42.  Accordingly,
exNetMgmtTrapReceiverComm.89.1.1.42 would identify the desired
instance.


OBJECT:
-------
        exNetMgmtTrapReceiverTable { exNetMgmt 20 }

Syntax:
        SEQUENCE OF ExNetMgmtTrapReceiverEntry
DAVID ExpressNet SNMP MIB                                      Page 55



Definition:
        This entity's Trap Receiver Table (10 entries).

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtTrapReceiverEntry { exNetMgmtTrapReceiverTable 1 }

Syntax:
        ExNetMgmtTrapReceiverEntry ::= SEQUENCE {
                exNetMgmtTrapType
                        INTEGER,
                exNetMgmtTrapReceiverAddr
                        IpAddress,
                exNetMgmtTrapReceiverComm
                        OCTET STRING (SIZE(20))
        }

Definition:
        A destination address and community string to a particular 
        trap receiver.

Access:
        read-write.

Status:
        mandatory.
The following definitions describe the individual components of each
entry in the Trap Receiver Table:


OBJECT:
-------
        exNetMgmtTrapType { exNetMgmtTrapReceiverEntry 1 }

Syntax:
        INTEGER {
                other(1),               -- none of the following
                invalid(2)              -- an invalidated address
        }

Definition:
        Setting this object to the value invalid(2) invalidates the 
        corresponding entry in the exNetTrapReceiverTable.  That is, 
        it effectively disassociates the address identified with the
        entry by removing the entry from the table.

Access:
DAVID ExpressNet SNMP MIB                                      Page 56


        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtTrapReceiverAddr { exNetMgmtTrapReceiverEntry 2 }

Syntax:
        IpAddress

Definition:
        IP address for trap receiver.

        This parameter will not survive a reset (exNetMgmtReset) 
        unless the specific network management configuration file
        is updated to reflect the change.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtTrapReceiverComm { exNetMgmtTrapReceiverEntry 3 }

Syntax:
        OCTET STRING (SIZE (20))

Definition:
        Community string used for traps.

        This parameter will not survive a reset (exNetMgmtReset) unless
        the specific network management configuration file is updated
        to reflect the change.

Access:
        read-write.

Status:
        mandatory.


OBJECT:
-------
        exNetMgmtAuthTrap { exNetMgmt 21 }

Syntax:
        INTEGER {
                disable(1),             -- disable authentication traps
DAVID ExpressNet SNMP MIB                                      Page 57


                enable(2)               -- enable authentication traps
        }

Definition:
        Enable or disable the use of authentication error trap 
        generation.

        This parameter will not survive a reset (exNetMgmtReset) unless
        the specific network management configuration file is updated
        to reflect the change.

Access:
        read-write.

Status:
        mandatory.
DAVID ExpressNet SNMP MIB                                      Page 58


9  DAVID EXPRESSNET TRAPS

9.1  Trap PDU

The form of the DAVID ExpressNet Trap-PDU is

Trap-PDU ::=

IMPLICIT SEQUENCE
        enterprise              -- type of object generating trap
                OBJECT IDENTIFIER,
        agent-addr              -- address of object generating trap
                NetworkAddress,
        generic-trap            -- generic trap type
                INTEGER {
                        coldStart(0),
                        authenticationFailure(4),
                        enterpriseSpecific(6)
                },
        specific-trap           -- DAVID-specific
                INTEGER {
                        chassisPsFail(0),
                        reserved1(1),
                        moduleFail(2),
                        modulePsFail(3),
                        portAutoPartition(4),
                        portJabbering(5),
                        reserved6(6),
                        moduleRecovery(7)
                },
        time-stamp              -- time elapsed between the last
                TimeTicks,      -- (re)initialization of the network
                                -- entity and the generation of the trap
        variable-bindings       -- interesting information
                VarBindList
        }
The Trap-PDU is generated by a protocol entity only at the request of
the SNMP application entity.  The means by which an SNMP application
entity selects the destination addresses of the SNMP application
entities is implementation specific.

Upon receipt of the Trap-PDU, the receiving protocol entity presents
its contents to the SNMP application entity.

The significance of the variable-bindings component of the Trap-PDU is
implementation specific.



9.2  Generic Traps

DAVID ExpressNet SNMP MIB                                      Page 59


9.2.1  The Cold Start Trap - A coldStart(0) trap signifies that the
sending protocol entity is reinitializing itself.  As a result, the
agent's configuration or the protocol entity implementation may be
altered.



9.2.2  The Authentication Failure Trap - An authenticationFailure(4)
trap signifies that the sending protocol entity is the addressee of a
protocol message that is not properly authenticated.  While
implementations of the SNMP must be capable of generating this trap,
they must also be capable of suppressing the emission of such traps
via an implementation-specific mechanism.



9.2.3  The Enterprise Specific Trap - A enterpriseSpecific(6) trap
signifies that the sending protocol entity recognizes that some
enterprise-specific event has occurred.  The specific-trap field
identifies the particular trap that occurred.



9.3  DAVID-Specific Traps

9.3.1  The Chassis Power Supply Failure Trap - A chassisPsFail(0) trap
signifies that the one or more of the voltages in the concentrator's
power supply(ies) has failed.

The exNetChassisPsStatus object identifier variable binding and value
will be returned as interesting information.



9.3.2  The Module Failure Trap - A moduleFail(2) trap signifies that
one of the modules (e.g., a Twisted-Pair Module) has stopped
responding to network management's polls.  This could indicate that
the module has been removed from the concentrator with the power on or
that the module has actually failed.

The exNetModuleStatus and exNetModuleSelfTestResult object identifier
variable bindings and values will be returned as interesting
information.



9.3.3  The Module Power Supply Failure Trap - A modulePsFail(3) trap
indicates that one of the module's power supplies has failed.

The exNetModulePsStatus object identifier variable binding and value
will be returned as interesting information.
DAVID ExpressNet SNMP MIB                                      Page 60


9.3.4  The Port AutoPartition Trap - The portAutoPartition(4) trap
indicates that a port has entered the auto-partition state as a result
of 32 consecutive collisions or because the DTE was jabbering.

The exNetPortPartStatus and exNetPortJabberStatus object identifier
variable bindings and values will be returned as interesting
information.



9.3.5  The Port DTE Jabbering Trap - The portJabbering(5) trap
indicates that the DTE connected to the port was jabbering.

The exNetPortJabberStatus object identifier variable binding and value
will be returned as interesting information.



9.3.6  The Module Recovery Trap - A moduleRecovery(7) trap signifies
that one of the modules (e.g., a Twisted-Pair Module) has started
responding to network management's polls.  This could indicate that
the module has just been plugged in to the Concentrator, or that the
module had failed and has cleared itself.

The exNetModuleStatus and exNetModuleSelfTestResult object identifier
variable bindings and values will be returned as interesting
information.
DAVID ExpressNet SNMP MIB                                      Page 61


10  DAVID EXPRESSNET OBJECT DEFINITIONS

Note:  This is the same as sections 4 to 8, but is compressed for
input to a MIB compiler or other program.  It is available in
machine-readable form to management station implementors.

DAVID-MIB { iso org(3) dod(6) internet(1) private(4) enterprises(1) 66 }

DEFINITIONS ::= BEGIN

IMPORTS
        enterprises, OBJECT-TYPE, NetworkAddress, IpAddress,
        Counter, Gauge, TimeTicks, DisplayString
        FROM RFC1158-SMI;

david                   OBJECT IDENTIFIER ::= { enterprises 66 }

products                OBJECT IDENTIFIER ::= { david 1 }

davidExpressNet         OBJECT IDENTIFIER ::= { products 3 }

exNetChassis            OBJECT IDENTIFIER ::= { davidExpressNet 1 }
exNetEthernet           OBJECT IDENTIFIER ::= { davidExpressNet 2 }

exNetConcentrator       OBJECT IDENTIFIER ::= { exNetEthernet 1 }
exNetModule             OBJECT IDENTIFIER ::= { exNetEthernet 2 }
exNetPort               OBJECT IDENTIFIER ::= { exNetEthernet 3 }
exNetMgmt               OBJECT IDENTIFIER ::= { exNetEthernet 4 }



10.1  The DAVID ExpressNet Chassis Group


exNetChassisType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),               -- none of the following
                m6102(2),               -- Model 6102
                m6103(3)                -- Model 6103
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 1 }

exNetChassisBkplType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),               -- none of the following
                expressNet(2),          -- DAVID ExpressNet
                reserved(3),            -- reserved for future 
                reserved(4),
                reserved(5)
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 2 }
DAVID ExpressNet SNMP MIB                                      Page 62



exNetChassisBkplRev OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 3 }

exNetChassisPsType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),               -- none of the following
                standardXfmr(2)         -- currently only one type
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 4 }

exNetChassisPsStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                ok(1),                  -- supply ok
                failed(2)               -- power supply failure
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 5 }

exNetSlotConfigTable OBJECT-TYPE
        SYNTAX  SEQUENCE OF ExNetSlotConfigEntry
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 7 }

exNetSlotConfigEntry OBJECT-TYPE
        SYNTAX  ExNetSlotConfigEntry
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigTable 1 }

ExNetSlotConfigEntry ::= SEQUENCE {
        exNetSlotIndex 
                INTEGER,
        exNetBoardId
                INTEGER,
        exNetBoardType
                INTEGER,
        exNetBoardDescr
                DisplayString,
        exNetBoardNumOfPorts
                INTEGER
}

exNetSlotIndex OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigEntry 1 }
DAVID ExpressNet SNMP MIB                                      Page 63



exNetBoardId OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigEntry 2 }

exNetBoardType OBJECT-TYPE
        SYNTAX  INTEGER {
                empty(1),       -- nothing installed
                other(2),       -- none of the following
                m6203(3),       -- Supervisor Module, Model 6203
                m6201(4),       -- Twisted-Pair Module, Model 6201
                reserved(5)     -- reserved for future use
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigEntry 3 }

exNetBoardDescr OBJECT-TYPE
        SYNTAX  DisplayString (SIZE(0..128))
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigEntry 4 }

exNetBoardNumOfPorts OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetSlotConfigEntry 40 }

exNetChassisCapacity OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetChassis 8 }
DAVID ExpressNet SNMP MIB                                      Page 64


10.2  The DAVID ExpressNet Concentrator Group


exNetConcRetimingStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                off(1),         -- retiming off
                on(2)           -- retiming on
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 1 }

exNetConcFrmsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 2 }

exNetConcOctetsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 3 }

exNetConcMcastFrmsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 4 }

exNetConcBcastFrmsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 5 }

exNetConcColls OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 6 }

exNetConcTooLongErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 7 }

exNetConcRuntErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 8 }
DAVID ExpressNet SNMP MIB                                      Page 65



exNetConcFragErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 9 }

exNetConcAlignErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 10 }

exNetConcFcsErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 11 }

exNetConcLateCollErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 12 }

exNetConcName OBJECT-TYPE
        SYNTAX  DisplayString (SIZE(0..20))
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetConcentrator 40 }

exNetConcJabbers OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 41 }

exNetConcSfdErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 42 }

exNetConcAutoPartitions OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 43 }

exNetConcOosBitRate OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 44 }
DAVID ExpressNet SNMP MIB                                      Page 66



exNetConcLinkErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 45 }

exNetConcFrameErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 46 }

exNetConcNetUtilization OBJECT-TYPE
        SYNTAX  OCTET STRING (SIZE (1..10))
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 47 }

exNetConcResetTimeStamp OBJECT-TYPE
        SYNTAX  Gauge
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetConcentrator 48 }

exNetConcReset OBJECT-TYPE
        SYNTAX  INTEGER {
                noReset(1),             -- not resetting
                reset(2),               -- resetting, maintaining config
                resetToDefault(3)       -- resetting to factory config
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetConcentrator 49 }
DAVID ExpressNet SNMP MIB                                      Page 67


10.3  The DAVID ExpressNet Module Group


exNetModuleTable OBJECT-TYPE
        SYNTAX  SEQUENCE OF ExNetModuleEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModule 1 }

exNetModuleEntry OBJECT-TYPE
        SYNTAX  ExNetModuleEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleTable 1 }

ExNetModuleEntry ::= SEQUENCE {
        exNetModuleIndex
                INTEGER,
        exNetModuleType
                INTEGER,
        exNetModuleHwVer
                INTEGER,
        exNetModuleStatus
                INTEGER,
        exNetModuleReset
                INTEGER,
        exNetModulePartStatus
                INTEGER,
        exNetModuleNmCntlStatus
                INTEGER,
        exNetModulePsStatus
                INTEGER,
        exNetModuleFrmsRxOk
                Counter,
        exNetModuleOctetsRxOk
                Counter,
        exNetModuleColls
                Counter,
        exNetModuleTooLongErrors
                Counter,
        exNetModuleRuntErrors
                Counter,
        exNetModuleAlignErrors
                Counter,
        exNetModuleFcsErrors
                Counter,
        exNetModuleLateCollErrors
                Counter,

        exNetModuleName
                DisplayString,
        exNetModuleJabbers
                Counter,
        exNetModuleSfdErrors
                Counter,
DAVID ExpressNet SNMP MIB                                      Page 68


        exNetModuleAutoPartitions
                Counter,
        exNetModuleOosBitRate
                Counter,
        exNetModuleLinkErrors
                Counter,
        exNetModuleFrameErrors
                Counter,
        exNetModuleFragErrors
                Counter,
        exNetModulePortConfig
                INTEGER,
        exNetModuleLinkStatConfig
                INTEGER,
        exNetModuleResetTimeStamp
                INTEGER,
        exNetModuleLinkStatus
                INTEGER,
        exNetModuleFwVer
                INTEGER,
        exNetModuleFwFeaturePkg
                INTEGER,
        exNetModuleSelfTestResult
                INTEGER
}

exNetModuleIndex OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 1 }

exNetModuleType OBJECT-TYPE
        SYNTAX  INTEGER {
                empty(1),       -- nothing installed
                other(2),       -- none of the following
                m6203(3),       -- Supervisor Module, Model 6203
                m6201(4),       -- Twisted-Pair Module, Model 6201
                reserved(5)     -- reserved for future use
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 2 }

exNetModuleHwVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 3 }

exNetModuleStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                ok(1),          -- good status
                noComms(2),     -- lost communications with module
                selfTestFail(3) -- module self-test failed
DAVID ExpressNet SNMP MIB                                      Page 69


                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 4 }

exNetModuleReset OBJECT-TYPE
        SYNTAX  INTEGER {
                noReset(1),             -- not resetting
                reset(2),               -- resetting, maintaining config
                resetToDefault(3)       -- resetting to factory config
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 5 }

exNetModulePartStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                enabled(1),     -- module enabled
                partition(2)    -- module partitioned
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 6 }

exNetModuleNmCntlStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                notNmControl(1),        -- module not under mgmt control
                nmControl(2)            -- module under net mgmt control
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 7 }

exNetModulePsStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                ok(1),          -- good status
                fail(2)         -- bad status
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 8 }

exNetModuleFrmsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 9 }

exNetModuleOctetsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 10 }
DAVID ExpressNet SNMP MIB                                      Page 70



exNetModuleColls OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 13 }

exNetModuleTooLongErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 14 }

exNetModuleRuntErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 15 }

exNetModuleAlignErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 16 }

exNetModuleFcsErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 17 }

exNetModuleLateCollErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 18 }

exNetModuleName OBJECT-TYPE
        SYNTAX  DisplayString (SIZE(0..20))
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 40 }

exNetModuleJabbers OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 41 }

exNetModuleSfdErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 42 }
DAVID ExpressNet SNMP MIB                                      Page 71



exNetModuleAutoPartitions OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 43 }

exNetModuleOosBitRate OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 44 }

exNetModuleLinkErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 45 }

exNetModuleFrameErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 46 }

exNetModuleFragErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 47 }

exNetModulePortConfig OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 48 }

exNetModuleLinkStatConfig OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 49 }

exNetModuleResetTimeStamp OBJECT-TYPE
        SYNTAX  Gauge
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 50 }

exNetModuleLinkStatus OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetModuleEntry 51 }
DAVID ExpressNet SNMP MIB                                      Page 72



exNetModuleFwVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 52 }

exNetModuleFwFeaturePkg OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 53 }

exNetModuleSelfTestResult OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetModuleEntry 54 }
DAVID ExpressNet SNMP MIB                                      Page 73


10.4  The DAVID ExpressNet Port Group


exNetPortTable OBJECT-TYPE
        SYNTAX  SEQUENCE OF ExNetPortEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPort 1 }

exNetPortEntry OBJECT-TYPE
        SYNTAX  ExNetPortEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortTable 1 }

ExNetPortEntry ::= SEQUENCE {
        exNetPortModuleIndex
                INTEGER,
        exNetPortIndex
                INTEGER,
        exNetPortLinkStatus
                INTEGER,
        exNetPortPartStatus
                INTEGER,
        exNetPortJabberStatus
                INTEGER,
        exNetPortFrmsRxOk
                Counter,
        exNetPortOctetsRxOk
                Counter,
        exNetPortColls
                Counter,
        exNetPortTooLongErrors
                Counter,
        exNetPortRuntErrors
                Counter,
        exNetPortAlignErrors
                Counter,
        exNetPortFcsErrors
                Counter,
        exNetPortLateCollErrors
                Counter,
        exNetPortName
                DisplayString,
        exNetPortJabbers
                Counter,
        exNetPortSfdErrors
                Counter,
        exNetPortAutoPartitions
                Counter,
        exNetPortOosBitRate
                Counter,
        exNetPortLinkErrors
                Counter,
        exNetPortFrameErrors
DAVID ExpressNet SNMP MIB                                      Page 74


                Counter,
        exNetPortFragErrors
                Counter,
        exNetPortType
                INTEGER,
        exNetPortMauType
                INTEGER,
        exNetPortConfig
                INTEGER,
        exNetPortLinkStatConfig
                INTEGER,
        exNetPortPolarity
                INTEGER,
        exNetPortTransmitTest
                INTEGER
}

exNetPortModuleIndex OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 1 }

exNetPortIndex OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 2 }

exNetPortLinkStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                off(1),         -- link is not connected
                on(2),          -- link is connected
                other(3)        -- returned for AUI
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 3 }

exNetPortPartStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                enabled(1),             -- port enabled
                partition(2),           -- port partitioned
                autoPartition(3)        -- port auto-partitioned
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 4 }

exNetPortJabberStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                ok(1),
                jabbering(2)    -- Port receiving jabber
                }
        ACCESS  read-only
DAVID ExpressNet SNMP MIB                                      Page 75


        STATUS  mandatory
        ::= { exNetPortEntry 5 }

exNetPortFrmsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 6 }

exNetPortOctetsRxOk OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 7 }

exNetPortColls OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 10 }

-- port error statistics

exNetPortTooLongErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 11 }

exNetPortRuntErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 12 }

exNetPortAlignErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 13 }

exNetPortFcsErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 14 }

exNetPortLateCollErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 15 }
DAVID ExpressNet SNMP MIB                                      Page 76



exNetPortName OBJECT-TYPE
        SYNTAX  DisplayString (SIZE(0..20))
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 40 }

exNetPortJabbers OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 41 }

exNetPortSfdErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 42 }

exNetPortAutoPartitions OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 43 }

exNetPortOosBitRate OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 44 }

exNetPortLinkErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 45 }

exNetPortFrameErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 46 }

exNetPortFragErrors OBJECT-TYPE
        SYNTAX  Counter
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 47 }

exNetPortType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                repeater(2),      -- any 802.3 section 9 rptr port
                tenBasefAsync(3), -- FOIRL-compat. port on 10BASE-FA star
                tenBasefSync(4)   -- synchronous port on 10BASE-FA star
DAVID ExpressNet SNMP MIB                                      Page 77


                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 48 }

exNetMauType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                tenBase5(2),      -- thick-wire (AUI)
                tenBaseT(3),      -- 10BASE-T
                FOIRL(4),         -- FOIRL
                tenBase2(5),      -- thin-wire (BNC)
                tenBaseFA(6)      -- 10BASE-F Active
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetPortEntry 49 }

exNetPortConfig OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                enabled(2),       -- port enabled
                disabled(3),      -- port disabled
                txDisabled(4),    -- transmit disabled (receive enabled)
                rxDisabled(5)     -- receive disabled (transmit enabled)
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 50 }

exNetPortLinkStatConfig OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                enabled(2),       -- link status enabled
                disabled(3),      -- link status disabled
                txDisabled(4),    -- transmit disabled (receive enabled)
                rxDisabled(5)     -- receive disabled (transmit enabled)
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 51 }

exNetPortPolarity OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                positive(2),      -- positive polarity
                negative(3),      -- negative polarity
                txNegative(4),    -- transmit negative, receive positive
                rxNegative(5)     -- receive negative, transmit positive
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 52 }
DAVID ExpressNet SNMP MIB                                      Page 78



exNetPortTransmitTest OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),         -- none of the following
                disabled(2),      -- transmit test disabled
                enabled(3)        -- transmit test enabled
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetPortEntry 53 }
DAVID ExpressNet SNMP MIB                                      Page 79


10.5  The DAVID ExpressNet Management Group


exNetMgmtType OBJECT-TYPE
        SYNTAX  INTEGER {
                other(1),       -- none of the following
                TBD(2)
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 1 }

exNetMgmtHwVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 2 }

exNetMgmtFwVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 3 }

exNetMgmtSwMajorVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 4 }

exNetMgmtSwMinorVer OBJECT-TYPE
        SYNTAX  INTEGER
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 5 }

exNetMgmtStatus OBJECT-TYPE
        SYNTAX  INTEGER {
                offline(1),     -- management is off-line
                online(2)       -- management is on-line
                }
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 6 }

exNetMgmtMode OBJECT-TYPE
        SYNTAX  INTEGER {
                primary(1),     -- in primary mode
                secondary(2)    -- in secondary mode
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 7 }
DAVID ExpressNet SNMP MIB                                      Page 80



exNetMgmtReset OBJECT-TYPE
        SYNTAX  INTEGER {
                notReset(1),    -- not resetting
                reset(2)        -- reset
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 8 }

exNetMgmtRestart OBJECT-TYPE
        SYNTAX  INTEGER {
                notRestart(1),  -- not restarting
                restart(2)      -- restart
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 9 }

exNetMgmtIpAddr OBJECT-TYPE
        SYNTAX  IpAddress
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 10 }

exNetMgmtNetMask OBJECT-TYPE
        SYNTAX  IpAddress
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 11 }

exNetMgmtDefaultGateway OBJECT-TYPE
        SYNTAX  IpAddress
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 12 }

exNetMgmtBaudRate OBJECT-TYPE
        SYNTAX  Gauge
        ACCESS  read-only
        STATUS  mandatory
        ::= { exNetMgmt 17 }

exNetMgmtLocation OBJECT-TYPE
        SYNTAX  DisplayString
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 19 }
DAVID ExpressNet SNMP MIB                                      Page 81


-- the trap receiver table

exNetMgmtTrapReceiverTable OBJECT-TYPE
        SYNTAX  SEQUENCE OF ExNetMgmtTrapReceiverEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 20 }

exNetMgmtTrapReceiverEntry OBJECT-TYPE
        SYNTAX  ExNetMgmtTrapReceiverEntry
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmtTrapReceiverTable 1 }

ExNetMgmtTrapReceiverEntry ::= SEQUENCE {
        exNetMgmtTrapType
                INTEGER,
        exNetMgmtTrapReceiverAddr
                IpAddress,
        exNetMgmtTrapReceiverComm
                OCTET STRING
        }

exNetMgmtTrapType OBJECT-TYPE
        SYNTAX  INTEGER {
                other (1),      -- none of the following
                invalid (2)     -- an invalidated address
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmtTrapReceiverEntry 1 }

exNetMgmtTrapReceiverAddr OBJECT-TYPE
        SYNTAX  IpAddress
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmtTrapReceiverEntry 2 }

exNetMgmtTrapReceiverComm OBJECT-TYPE
        SYNTAX  OCTET STRING
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmtTrapReceiverEntry 3 }

exNetMgmtAuthTrap OBJECT-TYPE
        SYNTAX  INTEGER {
                disable(1),     -- disable authentication traps
                enable(2)       -- enable authentication traps
                }
        ACCESS  read-write
        STATUS  mandatory
        ::= { exNetMgmt 21 }

END
DAVID ExpressNet SNMP MIB                                      Page 82


11  DAVID EXPRESSNET MIB SKELETON


david   OBJECT IDENTIFIER ::=
    { iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) 66 }

 
david
    1   products

        3   davidExpressNet
            1   exNetChassis
                1   exNetChassisType          (enum integer)
                2   exNetChassisBkplType      (enum integer)
                3   exNetChassisBkplRev       (integer)
                4   exNetChassisPsType        (enum integer)
                5   exNetChassisPsStatus      (enum integer)
                6
                7   exNetSlotConfigTable      (sequence)
                    1   exNetSlotConfigEntry
                        1   exNetSlotIndex        (integer)
                        2   exNetBoardId          (integer)
                        3   exNetBoardType        (enum integer)
                        4   exNetBoardDescr       (display string)

                        40  exNetBoardNumOfPorts  (integer)
                8   exNetChassisCapacity          (integer)

            2   exNetEthernet
                1   exNetConcentrator
                    1   exNetConcRetimingStatus   (enum integer)
                    2   exNetConcFrmsRxOk         (counter)
                    3   exNetConcOctetsRxOk       (counter)
                    4   exNetConcMcastFrmsRxOk    (counter)
                    5   exNetConcBcastFrmsRxOk    (counter)
                    6   exNetConcColls            (counter)
                    7   exNetConcTooLongErrors    (counter)
                    8   exNetConcRuntErrors       (counter)
                    9   exNetConcFragErrors       (counter)
                    10  exNetConcAlignErrors      (counter)
                    11  exNetConcFcsErrors        (counter)
                    12  exNetConcLateCollErrors   (counter)

                    40  exNetConcName             (display string 20)
                    41  exNetConcJabbers          (counter)
                    42  exNetConcSfdErrors        (counter)
                    43  exNetConcAutoPartitions   (counter)
                    44  exNetConcOosBitRate       (counter)
                    45  exNetConcLinkErrors       (counter)
                    46  exNetConcFrameErrors      (counter)
                    47  exNetConcNetUtilization   (octet string 10)
                    48  exNetConcResetTimeStamp   (integer)
                    49  exNetConcReset            (enum integer)


DAVID ExpressNet SNMP MIB                                      Page 83


                2   exNetModule
                    1   exNetModuleTable  (sequence of module entry)
                        1   exNetModuleEntry
                            1   exNetModuleIndex          (integer)
                            2   exNetModuleType           (enum integer)
                            3   exNetModuleHwVer          (integer)
                            4   exNetModuleStatus         (enum integer)
                            5   exNetModuleReset          (enum integer)
                            6   exNetModulePartStatus     (enum integer)
                            7   exNetModuleNmCtlStatus    (enum integer)
                            8   exNetModulePsStatus       (enum integer)
                            9   exNetModuleFrmsRxOk       (counter)
                            10  exNetModuleOctetsRxOk     (counter)
                            11
                            12
                            13  exNetModuleColls          (counter)
                            14  exNetModuleTooLongErrors  (counter)
                            15  exNetModuleRuntErrors     (counter)
                            16  exNetModuleAlignErrors    (counter)
                            17  exNetModuleFcsErrors      (counter)
                            18  exNetModuleLateCollErrors (counter)

                            40  exNetModuleName       (display string 20)
                            41  exNetModuleJabbers        (counter)
                            42  exNetModuleSfdErrors      (counter)
                            43  exNetModuleAutoPartitions (counter)
                            44  exNetModuleOosBitRate     (counter)
                            45  exNetModuleLinkErrors     (counter)
                            46  exNetModuleFrameErrors    (counter)
                            47  exNetModuleFragErrors     (counter)
                            48  exNetModulePortConfig     (integer)
                            49  exNetModuleLinkStatConfig (integer)
                            50  exNetModuleResetTimeStamp (integer)
                            51  exNetModuleLinkStatus     (integer)
                            52  exNetModuleFwVer          (integer)
                            53  exNetModuleFwFeaturePkg   (enum integer)
                            54  exNetModuleSelfTestResult (integer)

                3   exNetPort
                    1   exNetPortTable        (sequence of port entry)
                        1   exNetPortEntry
                            1   exNetPortModuleIndex      (integer)
                            2   exNetPortIndex            (integer)
                            3   exNetPortLinkStatus       (enum integer)
                            4   exNetPortPartStatus       (enum integer)
                            5   exNetPortJabberStatus     (enum integer)
                            6   exNetPortFrmsRxOk         (counter)
                            7   exNetPortOctetsRxOk       (counter)
                            8
                            9
                            10  exNetPortColls            (counter)
                            11  exNetPortTooLongErrors    (counter)
                            12  exNetPortRuntErrors       (counter)
                            13  exNetPortAlignErrors      (counter)
                            14  exNetPortFcsErrors        (counter)
DAVID ExpressNet SNMP MIB                                      Page 84


                            15  exNetPortLateCollErrors   (counter)

                            40  exNetPortName         (display string 20)
                            41  exNetPortJabbers          (counter)
                            42  exNetPortSfdErrors        (counter)
                            43  exNetPortAutoPartitions   (counter)
                            44  exNetPortOosBitRate       (counter)
                            45  exNetPortLinkErrors       (counter)
                            46  exNetPortFrameErrors      (counter)
                            47  exNetPortFragErrors       (counter)
                            48  exNetPortType             (enum integer)
                            49  exNetPortMauType          (enum integer)
                            50  exNetPortConfig           (enum integer)
                            51  exNetPortLinkStatConfig   (enum integer)
                            52  exNetPortPolarity         (enum integer)
                            53  exNetPortTransmitTest     (enum integer)


                4   exNetMgmt
                    1   exNetMgmtType             (enum integer)
                    2   exNetMgmtHwVer         (integer)
                    3   exNetMgmtFwVer            (integer)
                    4   exNetMgmtSwMajorVer       (integer)
                    5   exNetMgmtSwMinorVer       (integer)
                    6   exNetMgmtStatus           (enum integer)
                    7   exNetMgmtMode             (enum integer)
                    8   exNetMgmtReset            (enum integer)
                    9   exNetMgmtRestart          (enum integer)
                    10  exNetMgmtIpAddr           (IpAddress)
                    11  exNetMgmtNetMask          (IpAddress)
                    12  exNetMgmtDefaultGateway   (IpAddress)
                    13  exNetMgmtFileServerAddr   (IpAddress)
                    14
                    15
                    16
                    17  exNetMgmtBaudRate         (gauge)
                    18
                    19  exNetMgmtLocation         (display string)
                    20  exNetMgmtTrapReceiverTable  (sequence of trap entry)
                        1   exNetMgmtTrapReceiverEntry    (sequence)
                            1   exNetMgmtTrapType         (enum integer)
                            2   exNetMgmtTrapReceiverAddr (IpAddress)
                            3   exNetMgmtTrapReceiverComm (octet string)
                    21  exNetMgmtAuthTrap         (enum integer)
DAVID ExpressNet SNMP MIB                                      Page 85


12  REFERENCES


     1.  J.  Case, M.  Fedor, M.  Schoffstall, and C.  Davin, A Simple
         Network Management Protocol (SNMP), RFC 1157, May 1990.

         This RFC obsoletes RFC 1098 of April 1989, which in turn
         obsoleted RFC 1067.  The protocol is the same in all three
         versions; only the introductory text was changed.  The DAVID
         SNMP implementation is compliant with all three documents.

     2.  Cerf, V., IAB Recommendations for the Development of Internet
         Network Management Standards, RFC 1052, April 1988.

         Network management standards politics.

     3.  Cerf, V., Report of the Second Ad Hoc Network Management
         Review Group, RFC 1109, August 1989.

         Network management standards politics, continued.

     4.  Comer, Douglas, Internetworking With TCP/IP, Principles,
         Protocols, and Architecture, Prentice Hall, 1988.

         An excellent introduction to the TCP/IP protocol suite.

     5.  Davin, J., J.  Case, M.  Fedor, and M.  Schoffstall.  A
         Simple Gateway Monitoring Protocol (SGMP), RFC 1028, November
         1987.

         The predecessor to SNMP, for historical interest.

     6.  Department of Defense, Internet Protocol (IP), MIL-STD-1777,
         August 1983.

     7.  IEEE 802.3, Section 5, Layer Management, April 1989 draft.

     8.  Information processing systems - Open Systems
         Interconnection, Specification of Abstract Syntax Notation
         One (ASN.1), International Organization for Standardization,
         International Standard 8824, December 1987, also new draft
         March 1990.

     9.  Information processing systems - Open Systems
         Interconnection, Specification of Basic Encoding Rules for
         Abstract Notation One (ASN.1), International Organization for
         Standardization, International Standard 8825, December 1987.

    10.  Internet Control Message Protocol (ICMP), RFC 792.

    11.  McCloghrie, Keith, and Marshall Rose, Management Information
         Base for Network Management of TCP/IP-based internets
         (MIB-I), RFC 1156, May 1990.

         This RFC obsoletes RFC 1066 of August 1988.  The content is
DAVID ExpressNet SNMP MIB                                      Page 86


         the same in both versions; only the introductory text was
         changed.  The DAVID SNMP MIB complies with both documents.

         See also notes with Rose's MIB-II, below.

    12.  Plummer, David C., An Ethernet Address Resolution Protocol
         (ARP), RFC 826.

    13.  Postel, J., User Datagram Protocol (UDP), RFC 768, August
         1980.

    14.  Rose, Marshall, The Open Book, A Practical Perspective on
         OSI, Prentice Hall, 1990.

         Overview of principles and politics, with a very helpful
         chapter on ASN.1.

    15.  Marshall Rose, Management Information Base for Network
         Management of TCP/IP-based internets:  MIB-II, RFC 1158, May
         1990.

         MIB-II is a superset of MIB-I (RFC 1156).  It is a proposed
         standard Internet protocol; MIB-I is a full standard.

    16.  Rose, Marshall, and Keith McCloghrie, Structure and
         Identification of Management Information for TCP/IP-based
         internets (SMI), RFC 1155, May 1990.

         This RFC obsoletes RFC 1065 of August 1988.  The content is
         the same in both versions; only the introductory text was
         changed.  The DAVID SNMP MIB complies with both documents.

    17.  SNMP Working Group, Experimental Definitions of Managed
         Objects for the Ethernet-like Interfaces Types, RFC draft,
         October 1989.


